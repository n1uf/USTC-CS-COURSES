#  Point2D类
import math
class Point2D(object):
    def __init__(self, x, y, name=''):
        self.x = x
        self.y = y
        self.name = name

    def move_x(self, delta_x): self.x += delta_x

    def move_y(self, delta_y): self.y += delta_y

    def rotate(self, p, t):
        xr = self.x - p.x; yr = self.y - p.y
        x1 = p.x + xr * math.cos(t) - yr * math.sin(t)
        y1 = p.y + xr * math.sin(t) + yr * math.cos(t)
        self.x = x1; self.y = y1;

    def distance(self, p):
        xr = self.x - p.x; yr = self.y - p.y
        return math.sqrt(xr * xr + yr * yr)

    def __str__(self):
        if len(self.name) < 1:
            return '(%g, %g)' % (self.x, self.y)
        else:
            return '%s: (%g, %g)' % (self.name, self.x, self.y)

a = Point2D(-5, 2, 'a'); print (a)  # a: (-5, 2)
a.move_x(-1); print (a)             # a: (-6, 2)
a.move_y(2); print (a)              # a: (-6, 4)
b = Point2D(3, 4, 'b');  print (b)  # b: (3, 4)
print ('The distance between a and b is %f' % a.distance(b))
# The distance between a and b is 9.000000
b.rotate(a, math.pi/2)
print (a); print (b)     # a: (-6, 4)   b: (-6, 13)
a.rotate(b, math.pi)
print (a); print (b)     # a: (-6, 22)  b: (-6, 13)

#  
#  Complex类
from math import sqrt
tol = 1e-15

class Complex(object):
    def __init__(self, real, imag=0.0):
        self.real = real; self.imag = imag

    def __add__(self, other):
        if isinstance(other, (float,int)): other = Complex(other)
        elif not (hasattr(other, 'real') and hasattr(other, 'imag')):
            raise TypeError('other must have real and imag attr.')
        return Complex(self.real + other.real, self.imag + other.imag)

    def __radd__(self, other):   #  defines other + self
        return self.__add__(other)

    def __sub__(self, other):
        if isinstance(other, (float,int)): other = Complex(other)
        elif not (hasattr(other, 'real') and hasattr(other, 'imag')):
            raise TypeError('other must have real and imag attr.')
        return Complex(self.real - other.real, self.imag - other.imag)

    def __rsub__(self, other):   #  defines other - self
        if isinstance(other, (float,int)): other = Complex(other)
        elif not (hasattr(other, 'real') and hasattr(other, 'imag')):
            raise TypeError('other must have real and imag attr.')
        return other.__sub__(self)

    def __mul__(self, other):
        return Complex(self.real*other.real - self.imag*other.imag,
                       self.imag*other.real + self.real*other.imag)
    def __rmul__(self, other):   #  defines other + self
        return self.__mul__(other)

    def __truediv__(self, other):
        if isinstance(other, (float,int)): other = Complex(other)
        elif not (hasattr(other, 'real') and hasattr(other, 'imag')):
            raise TypeError('other must have real and imag attr.')
        ar, ai, br, bi = self.real, self.imag, other.real, other.imag
        r = float(br*br + bi*bi)
        return Complex((ar*br+ai*bi)/r, (ai*br-ar*bi)/r)

    def __rtruediv__(self, other):   #  defines other / self
        if isinstance(other, (float,int)): other = Complex(other)
        elif not (hasattr(other, 'real') and hasattr(other, 'imag')):
            raise TypeError('other must have real and imag attr.')
        return other.__truediv__(self)

    def __abs__(self):
        return sqrt(self.real*self.real + self.imag*self.imag)

    def __neg__(self): return Complex(-self.real, -self.imag)

    def __eq__(self, other):
        return abs(self.real-other.real) < tol and abs(self.imag-other.imag) < tol

    def __ne__(self, other): return not self.__eq__(other)

    def __str__(self): return '(%g, %g)' % (self.real, self.imag)

    def __repr__(self): return 'Complex' + str(self)

    def __pow__(self, power):
        raise NotImplementedError('pow is not yet implemented')

    def _illegal(self, op):
        print ('illegal operation "%s" for complex numbers' % op)

    def __gt__(self, other):  self._illegal('>')
    def __ge__(self, other):  self._illegal('>=')
    def __lt__(self, other):  self._illegal('<')
    def __le__(self, other):  self._illegal('<=')

u = Complex(2,-3); v = Complex(1, -4)
print (u + v, u - v, u * v,     u / v)
#     (3, -7) (1, 1) (-10, -11) (0.823529, 0.294118)
print (4 + v, 4 - v, 4 * v,   4 / v)
#     (5, -4) (3, 4) (4, -16) (0.235294, 0.941176)
print (u > v)
# illegal operation ">" for complex numbers
print (u ** 3)
# NotImplementedError: pow is not yet implemented

#  
#  Polynomial类
class Polynomial(object):
    def __init__(self, poly):
        self.poly = {}
        for power in poly:
            if abs(poly[power]) > tol: self.poly[power] = poly[power]

    def __call__(self, x):
        value = 0.0
        for power in self.poly: value += self.poly[power]*x**power
        return value

    def __add__(self, other):
        sum = self.poly.copy()   #  print (id(sum), id(self.poly))
        for power in other.poly:
            if power in sum:
                sum[power] += other.poly[power]
            else:
                sum[power] = other.poly[power]
        return Polynomial(sum)

    def __mul__(self, other):
        sum = {}
        for self_power in self.poly:
            for other_power in other.poly:
                sum[self_power + other_power] = \
                    self.poly[self_power] * other.poly[other_power]
        return Polynomial(sum)

    def __str__(self):
        s = ''
        for power in sorted(self.poly):
            s += ' + %g*x^%d' % (self.poly[power], power)
        s = s.replace('+ -', '- ')
        s = s.replace('x^0', '1')
        s = s.replace(' 1*', ' ')
        s = s.replace('x^1 ', 'x ')
        # s = s.replace('x^1', 'x') replaces x^100 by x^00
        if s[0:3] == ' + ':  # remove initial +
            s = s[3:]
        if s[0:3] == ' - ':  # fix spaces for initial -
            s = '-' + s[3:]
        return s

tol = 1E-15
p1 = Polynomial({0: -1, 2: 1, 7: 3})
print (p1)      #  -1 + x^2 + 3*x^7
p2 = Polynomial({0: 1, 2: -1, 5: -2, 3: 4})
print (p2)      #  1 - x^2 + 4*x^3 - 2*x^5
p3 = p1 + p2
print (p3)      #  4*x^3 - 2*x^5 + 3*x^7
p4 = p1 * p2
print (p4)
#  -1 + x^2 - 4*x^3 - x^4 + 4*x^5 + 3*x^7 - 3*x^9 + 12*x^10 - 6*x^12
print (p4(5))   #  -1353269851.0

#  
#  数值微分类
class Diff(object):
    def __init__(self, f, h=1E-5, dfdx_exact=None):
        self.f = f
        self.h = float(h)
        self.exact = dfdx_exact

    def get_error(self, x):
        if self.exact is not None:
            df_numerical = self(x)
            df_exact = self.exact(x)
            return 100 * abs( (df_exact - df_numerical) / df_exact )

class Forward1(Diff):
    def __call__(self, x):
        f, h = self.f, self.h
        return (f(x+h) - f(x))/h

class Backward1(Diff):
    def __call__(self, x):
        f, h = self.f, self.h
        return (f(x) - f(x-h))/h

class Central2(Diff):
    def __call__(self, x):
        f, h = self.f, self.h
        return (f(x+h) - f(x-h))/(2*h)

class Central4(Diff):
    def __call__(self, x):
        f, h = self.f, self.h
        return (4./3)*(f(x+h) - f(x-h))  /(2*h) - \
               (1./3)*(f(x+2*h) - f(x-2*h))/(4*h)

def table(f, x, h_values, methods, dfdx=None):
    print ('%-10s' % 'h', end=' ')
    for h in h_values: print ('%-8.2e' % h, end=' ')
    print()
    for method in methods:
        print ('%-10s' % method.__name__, end=' ')
        for h in h_values:
            if dfdx is not None:
                d = method(f, h, dfdx)
                output = d.get_error(x)
            else:
                d = method(f, h)
                output = d(x)
            print ('%-8.4f' % output, end=' ')
        print()

import math
def g(x): return math.exp(x*math.sin(x))

import sympy as sym
sym_x = sym.Symbol('x')
sym_gx = sym.exp(sym_x*sym.sin(sym_x))
sym_dgdx = sym.diff(sym_gx, sym_x)
dgdx = sym.lambdify([sym_x], sym_dgdx)

table(f=g, x=-0.65, h_values=[10**(-k) for k in range(1, 9)],
      methods=[Forward1, Central2, Central4], dfdx=dgdx)

#  
#  程序\ref{c4
h          1.00e-01  1.00e-02  1.00e-03  1.00e-04  1.00e-05  1.00e-06  1.00e-07  1.00e-08
Forward1   10.4974   1.0906    0.1095    0.0110    0.0011    0.0001    0.0000    0.0000
Central2   0.4611    0.0046    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000
Central4   0.0080    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

#  
#  覆盖
class Parent:           # define Parent class
   def method(self):
      print ('Calling method in class Parent')
	
class Child1(Parent):   # define Child1 class
   def method(self):
      print ('Calling method in class Child1')
	
class Child2(Parent):   # define Child2 class
   def method(self):
      print ('Calling method in class Child2')

class Child3(Parent):   # define Child3 class
   def method2(self):
      print ('Calling method2 in class Child3')	
	
c1 = Child1()           # instance of Child1
c2 = Child2()           # instance of Child2
c3 = Child3()           # instance of Child3
p = Parent()            # instance of Parent
c1.method()             # Calling method in class Child1
c2.method()             # Calling method in class Child2
c3.method()             # Calling method in class Parent
p.method()              # Calling method in class Parent

#  
#  近似计算定积分的几种方法
import numpy as np
import math

class Integrator(object):
    def __init__(self, a, b, n):
        self.a, self.b, self.n = a, b, n
        self.points, self.weights = self.construct_method()

    def construct_method(self):
        raise NotImplementedError('no rule in class %s' \
                                   % self.__class__.__name__)

    def integrate(self, f):
        s = 0
        for i in range(len(self.weights)):
            s += self.weights[i]*f(self.points[i])
        return s

class Midpoint(Integrator):
???

class Trapezoidal(Integrator):
???

class Simpson(Integrator):
???

class GaussLegendre(Integrator):  # hint: use np.linspace
???

# A linear function will be exactly integrated by all
# the methods, so such an f is the candidate for testing
# the implementations

def test_Integrate():
    """Check that linear functions are integrated exactly."""
    def f(x): return x + 2
    def F(x): return 0.5*x**2 + 2*x

    a = 2; b = 3; n = 4     # test data
    I_exact = F(b) - F(a)
    tol = 1E-15

    methods = [Midpoint, Trapezoidal, Simpson, GaussLegendre]
    for method in methods:
        integrator = method(a, b, n)

        I = integrator.integrate(f)
        assert abs(I_exact - I) < tol, 'bug in class %s' % method.__name__

if __name__ == '__main__':
    test_Integrate()

#  
