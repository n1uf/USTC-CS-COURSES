#  创建数组
In[1]: import numpy as np
In[2]: a = np.array([2, 8, 64])
Out[2]: array([ 2,  8, 64])
In[3]: a.dtype,a.ndim,a.shape,a.size
Out[3]: (dtype('int32'), 1, (3,), 3)
In[4]: b = np.array([3.14, 2.71, 6.83, -8.34])
In[5]: b.dtype,b.ndim,b.shape,b.size
Out[5]: (dtype('float64'), 1, (4,), 4)
In[6]: c = np.array([(1, 2.4), (6, -3), (8, -5)])
In[7]: c.ndim,c.shape,c.size
Out[7]:  (2, (3, 2), 6)
In[8]: d = np.array([95536, 2.71, 6, -8.34], dtype=np.int16); d
Out[8]: array([30000,     2,     6,    -8], dtype=int16))

#  
#  创建数组
In[1]: a = np.zeros((2, 3)); a
Out[1]:
array([[0., 0., 0.],
       [0., 0., 0.]])
In[2]: np.ones((3, 2))
Out[2]:
array([[1., 1.],
       [1., 1.],
       [1., 1.]])
In[3]: c = np.ones_like(a); c
Out[3]:
array([[1., 1., 1.],
       [1., 1., 1.]])
In[4]: np.arange(2, 30, 7)
Out[4]: array([ 2,  9, 16, 23])
In[5]: np.arange(0.2, 3.01, 0.7)
Out[5]: array([0.2, 0.9, 1.6, 2.3, 3. ])
In[6]: np.arange(6)
Out[6]: array([0, 1, 2, 3, 4, 5])
In[7]: np.linspace(0, 3, 7)
Out[7]: array([0. , 0.5, 1. , 1.5, 2. , 2.5, 3. ])

#  
#  改变形状
In[1]: h=np.arange(12).reshape(3,4) + 1; h
Out[1]:
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12]])
In[2]: h.flatten()
Out[2]: array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])
In[3]: h.reshape(2, 6)
Out[3]:
array([[ 1,  2,  3,  4,  5,  6],
       [ 7,  8,  9, 10, 11, 12]])
In[4]: h.T
Out[4]:
array([[ 1,  5,  9],
       [ 2,  6, 10],
       [ 3,  7, 11],
       [ 4,  8, 12]])
In[5]: h
Out[5]:
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12]])
In[6]: h.resize(2, 6), h
Out[6]:
(None,
 array([[ 1,  2,  3,  4,  5,  6],
        [ 7,  8,  9, 10, 11, 12]]))

#  
#  堆叠(Stacking)
In[1]: a = np.arange(1, 7).reshape(2,3); a
Out[1]:
array([[1, 2, 3],
       [4, 5, 6]])
In[2]: b = np.arange(7, 13).reshape(2,3); b
Out[2]:
array([[ 7,  8,  9],
       [10, 11, 12]])
In[3]: np.hstack((a, b))
Out[3]:
array([[ 1,  2,  3,  7,  8,  9],
       [ 4,  5,  6, 10, 11, 12]])
In[4]: np.vstack((a, b))
Out[4]:
array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [10, 11, 12]])

#  
#  分割
In[1]: c = np.arange(1, 25).reshape(2,12); c
Out[1]:
array([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12],
       [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]])
In[2]: np.hsplit(c, 4)
Out[2]:
[array([[ 1,  2,  3],
        [13, 14, 15]]),
 array([[ 4,  5,  6],
        [16, 17, 18]]),
 array([[ 7,  8,  9],
        [19, 20, 21]]),
 array([[10, 11, 12],
        [22, 23, 24]])]
In[3]: np.hsplit(c, (4, 7, 9))
Out[3]:
[array([[ 1,  2,  3,  4],
        [13, 14, 15, 16]]),
 array([[ 5,  6,  7],
        [17, 18, 19]]),
 array([[ 8,  9],
        [20, 21]]),
 array([[10, 11, 12],
        [22, 23, 24]])]
In[4]: d = np.arange(1, 25).reshape(6,4) + 1; d
Out[4]:
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12],
       [13, 14, 15, 16],
       [17, 18, 19, 20],
       [21, 22, 23, 24]])
In[5]: np.vsplit(d, (2, 3, 5))
Out[5]:
[array([[1, 2, 3, 4],
        [5, 6, 7, 8]]),
 array([[ 9, 10, 11, 12]]),
 array([[13, 14, 15, 16],
        [17, 18, 19, 20]]),
 array([[21, 22, 23, 24]])]

#  
#  基本运算
In[1]: a = np.arange(6).reshape(2, 3); a
Out[1]:
array([[0, 1, 2],
       [3, 4, 5]])
In[2]: b = np.arange(2,18,3).reshape(2, 3); b
Out[2]:
array([[ 2,  5,  8],
       [11, 14, 17]])
In[3]: a+b, a-b, a*b, a/b, -a, -b+(a**np.e-0.818*b+6)**(-np.pi)
Out[3]:
(array([[ 2,  6, 10],
        [14, 18, 22]]),
 array([[ -2,  -4,  -6],
        [ -8, -10, -12]]),
 array([[ 0,  5, 16],
        [33, 56, 85]]),
 array([[0.        , 0.2       , 0.25      ],
        [0.27272727, 0.28571429, 0.29411765]]),
 array([[ 0, -1, -2],
        [-3, -4, -5]]),
 array([[ -1.99023341,  -4.96511512,  -7.99647626],
        [-10.99985895, -13.99998898, -16.99999851]]))
In[4]:c=b.reshape(3, 2); c
Out[4]:
array([[ 2,  5],
       [ 8, 11],
       [14, 17]])
In[5]: a@c, a.dot(c)
Out[5]:
(array([[ 36,  45],
        [108, 144]]),
 array([[ 36,  45],
        [108, 144]]))
In[6]: d=a*3+b; b -= a; d, b
Out[6]:
(array([[ 2,  8, 14],
        [20, 26, 32]]),
 array([[ 2,  4,  6],
        [ 8, 10, 12]]))
In[7]: rg = np.random.default_rng()
In[8]: e = rg.random((2, 3)); e
Out[8]:
array([[0.31724113, 0.28135186, 0.19364362],
       [0.70296297, 0.76202543, 0.95436982]])
In[9]: f = e + a - 2*b; f, f.dtype
Out[9]:
(array([[ -3.68275887,  -8.71864814, -13.80635638],
        [-18.29703703, -23.23797457, -28.04563018]]),
 dtype('float64'))

#  
#  函数运算
In[1]: g = np.array([[2,6,5],[4,1,3]]); g
Out[1]: array([[2, 6, 5],
               [4, 1, 3]])
In[2]: g.sum(), g.max(), g.min()
Out[2]:  (21, 6, 1)
In[3]: g.max(axis=0), g.max(axis=1)
Out[3]:  (array([4, 6, 5]), array([6, 4]))
In[4]: g.min(axis=0), g.min(axis=1)
Out[4]: (array([2, 1, 3]), array([2, 1]))
In[5]: np.sort(g)                # sort along the last axis
Out[5]: array([[2, 5, 6],
               [1, 3, 4]])
In[6]: np.sort(g, axis=None)     # sort the flattened array
Out[6]: array([1, 2, 3, 4, 5, 6])
In[7]: np.sort(g, axis=0)        # sort along the first axis
Out[7]: array([[2, 1, 3],
               [4, 6, 5]])
In[8]: np.sort?
Out[8]: Signature: np.sort(a, axis=-1, kind=None, order=None)
Docstring:
Return a sorted copy of an array.

Parameters
----------
a : array_like
    Array to be sorted.
axis : int or None, optional
......
In[9]: np.sqrt(b) + np.exp(a - 5) * np.cos(e**1.3 - f)
Out[9]:
array([[1.40958124, 2.22018241, 2.83965649],
       [3.45077796, 3.87699024, 3.31766545]])

#  
#  一维数组的索引、切片和迭代
In[1]: a = np.arange(1, 16, 2)**2; a
Out[1]: array([  1,   9,  25,  49,  81, 121, 169, 225], dtype=int32)
In[2]: a[3], a[1:7:2]
Out[2]: (49, array([  9,  49, 121], dtype=int32))
In[3]: a[:6:3] = 361; a
Out[3]: array([361,   9,  25, 361,  81, 121, 169, 225], dtype=int32)
In[4]: a[::-1]
Out[4]: array([225, 169, 121,  81, 361,  25,   9, 361], dtype=int32)
In[5]: for i in a: print(np.sqrt(i), end=' ')
Out[6]: 19.0 3.0 5.0 19.0 9.0 11.0 13.0 15.0

#  
#  多维数组的索引、切片和迭代
In[1]: def f(x, y): return x * 4 + y + 1
In[2]: h = np.fromfunction(f, (3, 4), dtype=int); h
Out[2]:
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12]])
In[3]: h[1, 2], h[0, 3], h[2, 2]
Out[3]: (7, 4, 11)
In[4]: h[1:3], h[1:3,], h[1:3,:], h[0]
Out[4]:
(array([[ 5,  6,  7,  8],
        [ 9, 10, 11, 12]]),
 array([[ 5,  6,  7,  8],
        [ 9, 10, 11, 12]]),
 array([[ 5,  6,  7,  8],
        [ 9, 10, 11, 12]]),
 array([1, 2, 3, 4]))
In[5]: h[:, 1:4:2], h[:, 3:1:-1], h[:, -2]
Out[5]:
(array([[ 2,  4],
        [ 6,  8],
        [10, 12]]),
 array([[ 4,  3],
        [ 8,  7],
        [12, 11]]),
 array([ 3,  7, 11]))
In[6]: for row in h: print(row)
Out[6]:
[1 2 3 4]
[5 6 7 8]
[ 9 10 11 12]
In[7]: for element in h.flat: print(element, end=' ')
Out[7]: 1 2 3 4 5 6 7 8 9 10 11 12
In[8]: h[np.ix\_([0,2], [1])]  # rows 0 and 2, then column 1
Out[8]:
array([[ 2],
       [10]])
In[9]: h[np.ix\_([0, 2], [0, 2])]
Out[9]:
array([[ 1,  3],
       [ 9, 11]])
In[10]: h[[0, 2], [0, 2]] # column 0 from row 0 and column 2 from row 2
Out[10]: array([ 1, 11])
In[11]: h[[0,2]]
Out[11]:
array([[ 1,  2,  3,  4],
       [ 9, 10, 11, 12]])
In[12]: h[:,[0,2]]
Out[12]:
array([[ 1,  3],
       [ 5,  7],
       [ 9, 11]])
In[13]: h[1:3, 0:4]
Out[13]:
array([[ 5,  6,  7,  8],
       [ 9, 10, 11, 12]])
In[14]: j = np.arange(24).reshape(3, 2, 4); j
Out[14]:
array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7]],

       [[ 8,  9, 10, 11],
        [12, 13, 14, 15]],

       [[16, 17, 18, 19],
        [20, 21, 22, 23]]])
In[15]: j[2, ...]
Out[15]:
array([[16, 17, 18, 19],
       [20, 21, 22, 23]])
In[16]: j[:, 1:2, :]
Out[16]:
array([[[ 4,  5,  6,  7]],

       [[12, 13, 14, 15]],

       [[20, 21, 22, 23]]])
In[17]: j[...,  1:3]
Out[17]:
array([[[ 1,  2],
        [ 5,  6]],

       [[ 9, 10],
        [13, 14]],

       [[17, 18],
        [21, 22]]])

#  
#  用整数数组进行索引
In[1]: i = np.array([3, 2, 7, 3, 5]); a[i]
Out[1]: array([ 49,  25, 225,  49, 121], dtype=int32)
In[2]: j = np.array([[3, 2, 4], [1, 5, 6]]); a[j]
Out[2]:
array([[ 49,  25,  81],
       [  9, 121, 169]], dtype=int32)
In[3]: b = a.reshape(4,2); b
Out[3]:
array([[  1,   9],
       [ 25,  49],
       [ 81, 121],
       [169, 225]], dtype=int32)
In[4]: b[np.array([2, 3, 1, 2])]
Out[4]:
array([[ 81, 121],
       [169, 225],
       [ 25,  49],
       [ 81, 121]], dtype=int32)
In[5]: b[np.array([[2, 3], [1, 2]])]
Out[5]:
array([[[ 81, 121],
        [169, 225]],

       [[ 25,  49],
        [ 81, 121]]], dtype=int32)
In[6]: i1 = np.array([[3, 2],  # indices for the first dimension
                      [2, 1]])
In[7]: i2 = np.array([[0, 1],  # indices for the second dimension
                      [1, 0]])
In[8]: b[i1, i2]
Out[8]:
array([[169, 121],
       [121,  25]], dtype=int32)
In[9]: b[i1, i2] = 36; a
Out[9]: array([  1,   9,  36,  49,  81,  36,  36, 225], dtype=int32)

#  
#  整数数组作为索引
In[1]: data = np.cos(np.arange(103, 123)).reshape(5, 4); data
Out[1]:
array([[-0.78223089, -0.94686801, -0.24095905,  0.68648655],
       [ 0.98277958,  0.3755096 , -0.57700218, -0.99902081],
       [-0.50254432,  0.4559691 ,  0.99526664,  0.61952061],
       [-0.32580981, -0.97159219, -0.7240972 ,  0.18912942],
       [ 0.92847132,  0.81418097, -0.04866361, -0.86676709]])
In[2]: maxind0 = data.argmax(axis=0); maxind0
Out[2]: array([1, 4, 2, 0], dtype=int32)
In[3]: data_maxind0 = data[maxind0, range(data.shape[1])]; data_maxind0
Out[3]: array([0.98277958, 0.81418097, 0.99526664, 0.68648655])
In[2]: maxind1 = data.argmax(axis=1); maxind1
Out[2]: array([3, 0, 2, 3, 0], dtype=int32)
In[3]: data_maxind1 = data[range(data.shape[0]), maxind1]; data_maxind1
Out[3]: array([0.68648655, 0.98277958, 0.99526664, 0.18912942, 0.92847132])

#  
#  布尔数组作为索引
In[1]: a = np.arange(1, 16, 2)**2; a
Out[1]: array([  1,   9,  25,  49,  81, 121, 169, 225], dtype=int32)
In[2]: g = a > 50; g
Out[2]: array([False, False, False, False, False, False, False, False])
In[2]: a[g] = 0; a
Out[2]: array([ 1,  9, 36, 49,  0, 36, 36,  0], dtype=int32)
In[3]: b = a.reshape(2, 4); b
Out[3]:
array([[  1,   9,  25,  49],
       [ 81, 121, 169, 225]], dtype=int32)
In[4]: i1 = np.array([False, True]); b[i1, :]
Out[4]: array([[ 81, 121, 169, 225]], dtype=int32)
In[5]: i2 = np.array([True, False, False, True]); b[:, i2]
Out[199]:
array([[  1,  49],
       [ 81, 225]], dtype=int32)

#  
#  复制和视图
In[1]: k = h
In[2]: k is h, id(k), id(h)
Out[2]: (True, 186428160, 186428160)
In[3]: def get_id(x): return id(x)
In[4]: get_id(k)
Out[4]: 186428160
In[5]: m = h.view()
In[6]: m is h, m.base is h, m.flags.owndata
Out[6]: (False, True, False)
In[7]: m.resize((2, 6)); h.shape
Out[7]: (3, 4)
In[8]: m[1, 3] = 16; m, h
Out[8]:
(array([[ 1,  2,  3,  4,  5,  6],
        [ 7,  8,  9, 16, 11, 12]]),
 array([[ 1,  2,  3,  4],
        [ 5,  6,  7,  8],
        [ 9, 16, 11, 12]]))
In[9]: t = h[0:2, 1:3]; t
Out[9]:
array([[2, 3],
       [6, 7]])
In[10]: t[1, 0] = 20; h
Out[10]:
array([[ 1,  2,  3,  4],
       [ 5, 20,  7,  8],
       [ 9, 16, 11, 12]])
In[11]: v = h.copy()
In[12]: v is h, v.base is h, id(v), id(h)
Out[12]: (False, False, 186709872, 186427488)
In[13]: v[1, 1] = 36; v[1, 1], h[1, 1]
Out[13]: (36, 20)
In[14]: a = np.arange(1000000); b = a[:100].copy()
In[15]: del a  # the memory of ``a`` can be released.

#  
#  矩阵计算
In[1]: import numpy as np
In[2]: A = np.mat('[4 3;2 1]'); A
Out[2]:matrix([[4, 3],
               [2, 1]])
In[3]: A.I   #  inverse of A
Out[3]: matrix([[-0.5,  1.5],
                [ 1. ,  -2. ]])
In[4]: b = np.mat('[6 5]'); b
Out[4]: matrix([[6, 5]])
In[5]: b.T   #  matrix transpose of b
Out[5]:
matrix([[6],
        [5]])
In[6]: A*b.T
Out[6]:
matrix([[39],
        [17]])
In[7]: A = np.array([[4,3],[2,1]]); A
Out[7]:
array([[4, 3],
       [2, 1]])
In[8]: from scipy import linalg; linalg.inv(A)
Out[8]:
array([[-0.5,  1.5],
       [ 1. , -2. ]])
In[9]: b = np.array([[6,5]]); b  #  2D array
Out[9]: array([[6, 5]])
In[10]: b.T
Out[10]:
array([[6],
       [5]])
In[11]: A*b   #  not matrix multiplication!
Out[11]:
array([[24, 15],
       [12,  5]])
In[12]: A.dot(b.T) #  matrix multiplication
Out[12]:
array([[39],
       [17]])
In[13]: b = np.array([6,5]); b  #  1D array
Out[13]: array([6, 5])
In[14]: b.T   #  not matrix transpose!
Out[14]: array([6, 5])
In[15]: A.dot(b)
Out[15]: array([39, 17])
In[16]: A.dot(linalg.inv(A)
Out[16]:  array([[1., 0.],
                 [0., 1.]])
In[17]: linalg.det(A)
Out[17]: -2.0
In[18]: linalg.norm(A), linalg.norm(b)
Out[18]: (5.477225575051661, 7.810249675906654)
In[19]: x = np.linalg.solve(A, b); x
Out[19]: array([ 4.5, -4. ])
In[20]: A.dot(x) - b
Out[20]: array([0., 0.])
In[21]: la, v = linalg.eig(A)
In[22]: la
Out[22]: array([ 5.37228132+0.j, -0.37228132+0.j])
In[23]: v
Out[23]:
array([[ 0.90937671, -0.56576746],
       [ 0.41597356,  0.82456484]])
In[24]: A.dot(v[:, 0]) - la[0] * v[:, 0]
Out[24]: array([0.+0.j, 0.+0.j])
In[25]: np.sum(abs(v**2), axis=0)
Out[25]: array([1., 1.])
In[26]: A = np.array([[2,3,5],[7,9,11]])
In[27]: U,s,V = linalg.svd(A); s
Out[27]: array([16.96707058,  1.05759909])
In[28]: m, n = A.shape; S = linalg.diagsvd(s, m, n); S
Out[28]:
array([[16.96707058,  0.        ,  0.        ],
       [ 0.        ,  1.05759909,  0.        ]])
In[29]: U.dot(S.dot(V))
Out[29]:
array([[ 2.,  3.,  5.],
       [ 7.,  9., 11.]])
In[30]: tol = 1E-10; (abs(s) > tol).sum()  #  rank
Out[30]: 2

#  
